#!/bin/bash

#: Valid Args
COMPILE="compile"
CLEAN="clean"
DEPENDENCIES="install"
DERIVED_DATA_DIR="nef/DerivedData"

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 1)
green=$(tput setaf 2)
reset=$(tput sgr0)

#: IN - Check Args

##
#   printWrongArguments()
##
printWrongArguments() {
    echo ""
    echo "${bold}$1 ${normal}[${bold}$COMPILE ${normal}| ${bold}$DEPENDENCIES ${normal}| ${bold}$CLEAN${normal}]${bold} ${normal}<project>"
    echo ""
    echo "    ${bold}$COMPILE${normal}  compile playground's pages for the selected project"
    echo "    ${bold}$DEPENDENCIES${normal}  builds dependencies in selected project"
    echo "    ${bold}$CLEAN${normal}  clean builds in selected project"
    echo ""
}

##
#   printWrongConfig()
##
printWrongConfig() {
    echo ""
    echo "${bold}[!] ${normal}wrong configuration - should be ${bold}$COMPILE ${normal}or ${bold}$DEPENDENCIES ${normal}or ${bold}$CLEAN"
    echo ""
}

##
#   checkArguments(List<T> args) throws
#   - Parameter `args`: list of arguments received from command line
##
checkArguments() {
    # $0 and $1 in `args` are ref. to first and second parameter from command line
    # $0 - command
    # $1 - path

    if [ "$#" -ne 2 ]; then printWrongArguments $0; exit 1; fi

    local config=("$COMPILE" "$CLEAN" "$DEPENDENCIES")
    for e in "${config[@]}"; do [ $1 = $e ] && return 0; done

    printWrongConfig; exit 1
}

#: - Dependencies

##
#   dependencies(String folder)
#   - Parameter `folder`: path to the project folder.
##
dependencies() {
    makeStructure "$1"
    buildDependencies "$1"
}


#: - Compile

##
#   compile(String folder)
#   - Parameter `folder`: path to the project folder.
##
compile() {
    makeStructure "$1"
    buildDependencies "$1"
    buildProject "$1"
    copyFrameworks "$1"
    compilePlaygroundPages "$1"
}

##
#   buildProject(String folder) throws
#   - Parameter `folder`: path to the project folder.
##
buildProject() {
    cd "$1" # parameter `folder`

    local logPath="nef/log"

    find . -name '*.pbxproj' -print0 | while IFS= read -r -d $'\0' project; do
        podProject=$(eval echo "\"$project\" | grep 'Pods.xcodeproj' | awk '{ print length; }'")
        ! [ "$podProject" = "" ] && continue

        targetSection="sed -n '/Begin PBXNativeTarget section/, /End PBXNativeTarget section/p'"
        targetName="grep 'name = ' | awk -F' = ' '{print \$2}' | awk -F';' '{print \$1}'"
        schemeName=$(eval cat "\"$project\" | $targetSection | $targetName")

        # build
        workspace=$(workspaceForProjectPath "$1" "$project")
        workspaceName=$(echo "$workspace" | cut -d'/' -f 2)
        log="$logPath/$workspaceName.log"

        echo -ne "${reset}Building ${green}$workspaceName${normal} ($schemeName) ..."
        xcodebuild -workspace "$workspace" -scheme "$schemeName" -derivedDataPath "$DERIVED_DATA_DIR" -configuration Debug 1> "$log" 2>&1
        installed=`grep "BUILD SUCCEEDED" "$log"`

        if [ "${#installed}" -gt 0 ]; then
          echo " ✅"
        else
          echo " ❌"
          echo "${bold}${red}error: ${reset}${bold}building $workspaceName${normal} review '$log' for more information."
          exit 1
        fi
    done
}

##
#   workspaceForProjectPath(String folder, String projectPath): String
#   - Parameter `folder`: path to the project folder.
#   - Parameter `projectPath`: path to the *.pbxproj file.
#   - Return `workspace` path
##
workspaceForProjectPath() {
    local path="$1"         # parameter `folder`
    local projectPath="$2"  # parameter `projectPath`

    cd "$path"

    local xcprojectPath=$(echo "$projectPath" | rev | cut -d'/' -f 2- | rev)
    local xcprojectNoExtension=$(echo "$xcprojectPath" | rev | cut -d'.' -f 2- | rev)

    if [ -d "$xcprojectNoExtension.xcworkspace" ]; then
        echo "$xcprojectNoExtension.xcworkspace"
    else
        echo "$xcprojectNoExtension.xcodeproj"
    fi
}

##
#   buildDependencies(String folder)
#   - Parameter `folder`: path to the project folder.
##
buildDependencies() {
    local path="$1" # parameter `folder`

    buildPODS "$path"
    addPlaygroundReference "$path"
}

##
#   buildPODS(String folder) throws
#   - Parameter `folder`: path to the project folder.
##
buildPODS() {
    cd "$1"

    local podfile="Podfile"
    local log="nef/log/pod-install.log"

    echo -ne "${normal}Installing ${green}Pods ${reset}..."

    find . -name $podfile -print0 | while IFS= read -r -d $'\0' podfilePath; do
        path="${podfilePath::${#podfilePath}-${#podfile}-1}"
        cd "$path"

        pod install 1> "$log" 2>&1
        installed=`grep "Pod installation complete" "$log"`

        if [ "${#installed}" -gt 0 ]; then
            echo " ✅"
            return 0
        else
            echo " ❌"
            echo "${bold}${red}error: ${reset}${bold}pod install${normal} review 'nef/log/pod-install.log' for more information."
            exit 1
        fi
    done
}

##
#   addPlaygroundReference(String folder)
#   - Parameter `folder`: path to the project folder.
##
addPlaygroundReference() {
    cd "$1"

    local playgrounds=$(playgroundForProjectPath "$1")
    local pattern="<FileRef"

    find . -name '*.pbxproj' -print0 | while IFS= read -r -d $'\0' project; do
        workspace=$(workspaceForProjectPath "$1" "$project")
        workspaceContent="$workspace/contents.xcworkspacedata"
        ! [[ $workspace = .*".xcworkspace" ]] && continue
        grep -q ".playground" "$workspaceContent"; [ $? -eq 0 ] && continue

        for playground in "${playgrounds[@]}"; do
            playgroundScaped=$(echo "$playground" | sed 's/\//\\\//g')
            sed -i '' "1,/<FileRef/s/<FileRef/<FileRef location = \"group:$playgroundScaped\"> <\/FileRef><FileRef/" "$workspaceContent"
        done
    done
}

##
#   playgroundForProjectPath(String projectPath): [String]
#   - Parameter `projectPath`: path to the *.playground file.
#   - Return list of path `playground`
##
playgroundForProjectPath() {
    cd "$1"

    playgrounds=()
    while read -r -d $'\0' playground; do
        playgrounds+=("$playground")
    done < <(find . -name '*.playground' -print0)

    echo $playgrounds
}

##
#   makeStructure(String folder)
#   - Parameter `folder`: path to the project folder.
##
makeStructure() {
    set +e
    local projectFolder=$1  # parameter `folder`

    cd $projectFolder

    cleanStructure $projectFolder
    mkdir -p nef/build/fw
    mkdir -p nef/log
    mkdir -p $DERIVED_DATA_DIR
}

cleanStructure() {
    set +e
    local projectFolder=$1  # parameter `folder`

    cd $projectFolder

    rm -r nef/build 1>/dev/null 2>/dev/null
    rm -r nef/log 1>/dev/null 2>/dev/null
    rm -r $DERIVED_DATA_DIR 1>/dev/null 2>/dev/null
}

##
#   copyFrameworks(String folder)
#   - Parameter `folder`: path to the project folder.
##
copyFrameworks() {
    local projectFolder=$1  # parameter `folder`

    cd $projectFolder

    cp -a $(find "$DERIVED_DATA_DIR/build" -name '*.framework') nef/build/fw
    echo "Copy ${green}frameworks${reset} ✅"
}

##
#   makeHeaders(String folder, String playgroundName): String
#   - Parameter `folder`: path to the project folder.
#   - Parameter `playgroundName`: playground page name (kind of: *.xcplaygroundpage)
#   - Return `output`: path to file ready to build - added headers
##
makeHeaders() {
    local content=$1    # parameter `folder`
    local playground=$2 # parameter `playgroundName`
    local output="nef/build/$playground.swift"

    libs=(`xcrun swiftc -emit-imported-modules "$content" | sort -r`)

    local remove=()
    local imports=""

    for lib in "${libs[@]}"; do
        [ $lib = "" ] && continue
        remove+=("| sed s/\"import $lib\"//g")
        imports="import $lib$'\n'$imports"
    done

    if [ "${#remove[@]}" -ne 0 ]; then
        eval "{ echo $imports; cat \"$content\" ${remove[@]}; } > \"$output\""
    else
        eval "cat \"$content\" > \"$output\""
    fi

    echo "$output"
}

##
#   compilePlaygroundPages(String folder)
#   - Parameter `folder`: path to the project folder.
##
compilePlaygroundPages() {
    local projectFolder=$1  # parameter `folder`

    cd $projectFolder

    pages=()
    while read -r -d $'\0' playground; do
        pages+=("$playground")
    done < <(find . -name '*.xcplaygroundpage' -print0)

    echo "${bold}Found ${#pages[@]} playgrounds${normal}"

    for file in "${pages[@]}"; do
        pageName=$(echo $file | rev | cut -d'/' -f 1 | rev)
        echo -ne "${normal}   Compiling ${green}$pageName${reset} ..."

        # paths
        baseFile=$(echo $file | cut -c 2-)
        baseAbsolute=$(echo "$projectFolder$baseFile")
        content=$baseAbsolute/Contents.swift
        playgroundName=$(echo $baseAbsolute | rev | cut -d'/' -f 1 | cut -d'.' -f 2 | rev)

        # headers
        output=$(makeHeaders "$content" "$playgroundName")

        # compile
        compilePlaygroundPage "$output" "$playgroundName"

        echo " ✅"
    done
}

##
#   compilePlaygroundPage(String folder, String playgroundName) throws
#   - Parameter `folder`: path to the project folder.
#   - Parameter `playgroundName`: playground page name (kind of: *.xcplaygroundpage)
##
compilePlaygroundPage() {
    set +e

    local file="$1"       # parameter `folder`
    local playground="$2" # parameter `playgroundName`
    local log="nef/log/$playground.log"

    xcrun swift -F "nef/build/fw" "$1" 1> "$log" 2>&1;

    errors=`grep " error:" "$log"`
    [ "${#errors}" -eq 0 ] && return 0

    echo " ❌"
    echo "$errors" | while read -r error; do echo "${bold}${red}error:${normal}${reset}$error"; done
    exit 1
}

#: - Clean

##
#   clean(String folder)
#   - Parameter `folder`: path to the project folder.
##
clean() {
    set +e

    $(cleanNEF "$1");   echo "Clean nef   ✅"
    $(cleanPODS "$1");  echo "Clean PODS  ✅"
}

##
#   cleanNEF(String folder)
#   - Parameter `folder`: path to the project folder.
##
cleanNEF() {
    cd "$1"
    rm nef.log 1>/dev/null 2>/dev/null
    rm -rf nef 1>/dev/null 2>/dev/null
}

##
#   cleanPODS(String folder)
#   - Parameter `folder`: path to the project folder.
##
cleanPODS() {
    cd "$1"
    pod deintegrate 1>/dev/null 2>/dev/null
    rm -rf Pods 2>/dev/null
    rm -rf build 2>/dev/null
    rm podfile.lock 2>/dev/null
    rm -rf ./*.xcworkspace 1>/dev/null 2>/dev/null
}

#: MAIN
set -e
checkArguments $@

root=`pwd`
if [ -d "$root/$2" ]; then
  projectPath="$root/$2"
else
  projectPath="$2"
fi

if [ $1 = "$COMPILE" ]; then
    compile "$projectPath"
elif [ $1 = "$DEPENDENCIES" ]; then
    dependencies "$projectPath"
else
    clean "$projectPath"
fi
