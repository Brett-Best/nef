#!/bin/bash

#: Valid Args
JEKYLL="jekyll"
PLAYGROUND="playground"
COMPILE="compile"
CLEAN="clean"

#: Default params
DEFAULT_PLAYGROUND="BowPlayground"

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 1)
green=$(tput setaf 2)
lime=$(tput setaf 190)
reset=$(tput sgr0)

#: IN - Help

##
#   printHelp()
##
printHelp() {
    printHelpJekyll $@
    printHelpPlayground $@
    printHelpCompileClean $@
}

##
#   printHelpJekyll()
##
printHelpJekyll() {
    echo ""
    echo "${normal}$0 ${bold}$JEKYLL${normal} ${normal}<project> ${bold}--output${normal} <output> [${bold}--main-page${normal} <main-page>]${reset}"
    echo ""
    echo "    ${green}${bold}$JEKYLL${reset}${normal} render documentation compatible with Jekyll from source playgrounds"
    echo "    ${lime}${bold}--output${reset}${normal} path where to render the Jekyll site"
    echo "    ${lime}${bold}--main-page${reset}${normal} the main page in Jekyll file format [optional]${reset}"
    echo ""
}

##
#   printHelpPlayground()
##
printHelpPlayground() {
    echo ""
    echo "${normal}$0 ${bold}$PLAYGROUND${normal} [${bold}--name${normal} <project>] [${bold}--version${normal} <number format: 0.0.0>]"
    echo ""
    echo "    ${green}${bold}$PLAYGROUND${reset}${normal} build a playground with Bow compatibility"
    echo "    ${lime}${bold}--name${reset}${normal} create a playground project using this name [optional]"
    echo "    ${lime}${bold}--version${reset}${normal} bow's version to use [optional]"
    echo ""
}

##
#   printHelpCompileClean()
##
printHelpCompile() {
    printHelpCompileClean
}

printHelpClean() {
    printHelpCompileClean
}

printHelpCompileClean() {
    echo ""
    echo "${normal}$0 ${bold}$COMPILE${normal} | ${bold}$CLEAN${normal} <project>"
    echo ""
    echo "    ${green}${bold}$COMPILE${reset}${normal} compile a Bow's playground."
    echo "    ${green}${bold}$CLEAN${reset}${normal} clean nef dependencies in Bow's playground."
    echo ""
}

#: - Playground

##
#   jekyll(List<String> args)
#   - Parameter `args`: list of command line arguments
##
jekyll() {
  projectPath=""
  outputPath=""
  mainPagePath=""

  while [ "$1" != "" ]; do
      case $1 in
          $JEKYLL )          shift; projectPath=$1 ;;
          -o | --output )    shift; outputPath=$1 ;;
          -m | --main-page ) shift; mainPagePath=$1 ;;
          -n | --name )      printHelpJekyll; exit 1 ;;
          -v | --version )   printHelpJekyll; exit 1 ;;
          $PLAYGROUND )    printHelpJekyll; exit 1 ;;
          $COMPILE )       printHelpJekyll; exit 1 ;;
          $CLEAN )         printHelpJekyll; exit 1 ;;
          * )              printHelpJekyll; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}."; exit 1 ;;
      esac
      shift
  done

  if [ "$projectPath" == "" ] || [ "$outputPath" == "" ]; then
      printHelpJekyll; exit 1
  else
      ~/Documents/3.projects/47deg/nef/bin/nef-jekyll --project "$projectPath" --output "$outputPath" --main-page "$mainPagePath"
  fi
}

##
#   playground(List<String> args)
#   - Parameter `args`: list of command line arguments
##
playground() {
    projectName=$DEFAULT_PLAYGROUND
    version=""

    while [ "$1" != "" ]; do
        case $1 in
            $PLAYGROUND )    ;;
            -n | --name )    shift; projectName=$1 ;;
            -v | --version ) shift; version=$1 ;;
            -o | --output )    printHelpPlayground; exit 1 ;;
            -m | --main-page ) printHelpPlayground; exit 1 ;;
            $JEKYLL )        printHelpPlayground; exit 1 ;;
            $COMPILE )       printHelpPlayground; exit 1 ;;
            $CLEAN )         printHelpPlayground; exit 1 ;;
            * )              printHelpPlayground $@; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}."; exit 1 ;;
        esac
        shift
    done

    if [ "${#version}" -gt 0 ]; then
      nef-playground --name "$projectName" --version "$version"
    else
      nef-playground --name "$projectName"
    fi

    nefc install  "$projectName"
}

#: - Compile

##
#   compile(List<String> args)
#   - Parameter `args`: list of command line arguments
##
compile() {
    projectFolder=""

    while [ "$1" != "" ]; do
        case $1 in
            $COMPILE )         shift; projectFolder=$1 ;;
            -n | --name )      printHelpCompile; exit 1 ;;
            -v | --version )   printHelpCompile; exit 1 ;;
            -o | --output )    printHelpCompile; exit 1 ;;
            -m | --main-page ) printHelpCompile; exit 1 ;;
            $JEKYLL )        printHelpCompile; exit 1 ;;
            $PLAYGROUND )    printHelpCompile; exit 1 ;;
            $CLEAN )         printHelpCompile; exit 1 ;;
            * )              printHelpCompile; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}."; exit 1 ;;
        esac
        shift
    done

    if [ "${#projectFolder}" -gt 0 ]; then
      nefc compile "$projectFolder"
    else
      printHelpCompile; echo "${bold}[!] ${normal}${red}error:${reset} command format."; exit 1
    fi
}

#: - Clean

##
#   clean(List<String> args)
#   - Parameter `args`: list of command line arguments
##
clean() {
    projectFolder=""

    while [ "$1" != "" ]; do
        case $1 in
            $CLEAN )         shift; projectFolder=$1 ;;
            -n | --name )      printHelpCompile; exit 1 ;;
            -v | --version )   printHelpCompile; exit 1 ;;
            -o | --output )    printHelpJekyll; exit 1 ;;
            -m | --main-page ) printHelpJekyll; exit 1 ;;
            $JEKYLL )        printHelpClean; exit 1 ;;
            $PLAYGROUND )    printHelpClean; exit 1 ;;
            $COMPILE )       printHelpClean; exit 1 ;;
            * )              printHelpClean; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}."; exit 1 ;;
        esac
        shift
    done

    if [ "${#projectFolder}" -gt 0 ]; then
      nefc clean "$projectFolder"
    else
      printHelpClean; echo "${bold}[!] ${normal}${red}error:${reset} command format."; exit 1
    fi
}

#: - MAIN
set -e

while [ "$1" != "" ]; do
    case $1 in
        $JEKYLL )     jekyll $@; exit 0 ;;
        $PLAYGROUND ) playground $@; exit 0 ;;
        $COMPILE )    compile $@; exit 0 ;;
        $CLEAN )      clean $@; exit 0 ;;
        -h | --help | help )  printHelp; exit 0 ;;
        * )                   printHelp; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}."; exit 1
    esac
    shift
done

printHelp; exit 1
